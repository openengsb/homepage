~~
~~ Licensed to the Austrian Association for Software Tool Integration (AASTI)
~~ under one or more contributor license agreements. See the NOTICE file
~~ distributed with this work for additional information regarding copyright
~~ ownership. The AASTI licenses this file to you under the Apache License,
~~ Version 2.0 (the "License"); you may not use this file except in compliance
~~ with the License. You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

Communication model

  OpenEngSB relies on event passing for communication between tools and components. Most internal components also rely on this method, some use different approaches as performance trade-off.
  
  A newly created event usually passes three components when travelling along the bus:
  
  * tool connector ("connector")
  
  * domain specific rule engine ("domain")
  
  * routing and distribution rule engine ("router")
  
  []
  
  They participate in the internal control flow as well as in any notification process started externally - e.g. by activity of a connected tool.

* Infrastructure example

[../images/communication_architecture.png] OpenEngSB communication infrastructure example
  
* Notification process (tool activity)
  
  * adapter creates an event
	
  * adapter forwards event to domain
	
  * domain receives event
	
  * domain manipulates event payload (see "Event structure")
	
  * domain forwards event to router
	
  * router receives event
	
  * router distributes event to subscribers - e.g. storage, other domains
  
  []

  Event structure

+---
domain name
event type (uid - e.g. class name)
tool name
data (tree structure, key/value pairs)
+---

* Component activities

  * Router receives event
	
+---
 * router forwards event to domain (rule evaluation)
 * router may use rpc endpoints
+---

  * Domain receives event
	
+---
 * domain may manipulate event
 * domain may generate new events
 * domain may return event to router
 * domain may access event context (context helper)
 * domain may use rpc endpoints (forwarding to router, tool connector, components - e.g. EDB)
+---
	
  * Tool connector receives event
  
+---
 * connector may use rpc endpoints (interaction with tool, components - e.g. Linking)
+---
	
