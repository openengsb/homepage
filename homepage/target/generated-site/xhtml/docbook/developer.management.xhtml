<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator"
    content="HTML Tidy for Java (vers. 2009-12-01), see jtidy.sourceforge.net" />
    <meta http-equiv="Content-Type"
    content="text/html; charset=ISO-8859-1" />
    <title>
      Chapter 17. Security in the OpenEngSB
    </title>
    <link rel="stylesheet" href="css/html.css" type="text/css" />
    <meta name="generator"
    content="DocBook XSL-NS Stylesheets V1.75.2" />
    <link rel="home" href="openengsb-manual.html"
    title="OpenEngSB Manual" />
    <link rel="up" href="user.manual.html"
    title="Part III. OpenEngSB Framework" />
    <link rel="prev" href="developer.persistence.html"
    title="Chapter 16. Persistence in the OpenEngSB" />
    <link rel="next" href="developer.workflows.html"
    title="Chapter 18. Workflows" />
  </head>
  <body bgcolor="white" text="black" link="#0000FF" vlink="#840084"
  alink="#0000FF">
    <div xmlns:fo="http://www.w3.org/1999/XSL/Format" id="top">
      <div id="header">
      </div>
    </div>
    <div class="chapter"
    title="Chapter 17. Security in the OpenEngSB">
      <div class="titlepage">
        <div>
          <div>
            <h2 class="title">
              <a id="developer.management"
              name="developer.management"></a>Chapter 17. Security
              in the OpenEngSB
            </h2>
          </div>
        </div>
      </div>
      <div class="section" title="17.1. Usermanagement">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both">
                <a id="developer.security.usermanagement"
                name="developer.security.usermanagement"></a>17.1. Usermanagement
              </h2>
            </div>
          </div>
        </div>
        <p>
          The OpenEngSB has a central user management service,
          which can be used for example by an user interface. The
          service is designed to manage your users. You can create
          new user and save them to the persistence or retrieve,
          update and delete them.
        </p>
        <p>
          The user management needs a back-end database, e.g. the
          central persistence service of the OpenEngSB.
        </p>
        <p>
          The interface of the <a class="link"
          href="https://github.com/openengsb/openengsb/blob/master/core/api/src/main/java/org/openengsb/core/api/security/UserManager.java"
           target="_top">User manager</a> supports basic CRUD
          mechanisms (create, retrieve, update, delete). The <a
          class="link"
          href="https://github.com/openengsb/openengsb/blob/master/core/api/src/main/java/org/openengsb/core/api/security/model/User.java"
           target="_top">User</a> is the used user model. It holds
          attributes like a password, username, if the user is
          enabled, or his account is expired or locked. A user is
          identified by his username. So the username can not be
          changed. Another attribute are the authorities. These are
          the roles granted to the user. These can be for example
          "ROLE_ADMIN" which defines the user as admin. Depending
          on the roles, a user can have different rights. For the
          OpenEngSB-UI a user has to have at least the role
          "ROLE_USER" which is the default role.
        </p>
      </div>
      <div class="section" title="17.2. Access control">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both">
                <a id="developer.security.access"
                name="developer.security.access"></a>17.2. Access
                control
              </h2>
            </div>
          </div>
        </div>
        <p>
          Access control is done on the service level.
          Core-services and connector-instances are all published
          as OSGi-services. Other services and components always
          reference these service instances. We use the approach of
          AOP to achieve security of these services. The
          openengsb.core.security-bundle publishes a service that
          serves as a method-interceptor. When it is attached to a
          service every method call on the service is preceeded
          with an authorization-check.
        </p>
        <p>
          A reference to the method-interceptor can be obtained by
          this line in the spring-context.xml
        </p>
<pre xml:space="preserve" class="programlisting">
&lt;osgi:reference id="securityInterceptor" interface="org.aopalliance.intercept.MethodInterceptor" /&gt;
</pre>
        <p>
          In order to attach it to an existing bean, one has to
          create a ProxyFactoryBean:
        </p>
<pre xml:space="preserve" class="programlisting">
&lt;bean id="secureServiceManager" class="org.springframework.aop.framework.ProxyFactoryBean"&gt;
  &lt;property name="proxyInterfaces"&gt;
    &lt;value&gt;other.ServiceInterface&lt;/value&gt;
  &lt;/property&gt;
  &lt;property name="interceptorNames"&gt;
    &lt;list&gt;
      &lt;value&gt;securityInterceptor&lt;/value&gt;
    &lt;/list&gt;
  &lt;/property&gt;
  &lt;property name="target" ref="&lt;realBean&gt;" /&gt;
&lt;/bean&gt;
</pre>
        <p>
          When registering a service in code rather than in a
          spring context.xml this can be done as seen in the <a
          class="link"
          href="https://github.com/openengsb/openengsb/blob/master/core/common/src/main/java/org/openengsb/core/common/AbstractServiceManager.java"
           target="_top">AbstractServiceManager</a>
        </p>
<pre xml:space="preserve" class="programlisting">
import org.springframework.aop.framework.ProxyFactory;
//
// ...
//
ProxyFactory factory = new ProxyFactory(serviceObject);
factory.addAdvice(securityInterceptor);
OpenEngSBService securedService = (OpenEngSBService) factory.getProxy();
</pre>
        <p>
          The decision about the allowing the user access to a
          service as made by looking at the services instanceId.
          Therefore, all services that are to be placed under this
          access control, must implement <a class="link"
          href="https://github.com/openengsb/openengsb/blob/master/core/api/src/main/java/org/openengsb/core/api/OpenEngSBService.java"
           target="_top">OpenEngSBservice</a>, and make sure the
          instanceId is unique enough to ensure security. You may
          want to derive your service-class from <a class="link"
          href="https://github.com/openengsb/openengsb/blob/master/core/common/src/main/java/org/openengsb/core/common/AbstractOpenEngSBService.java"
           target="_top">AbstractOpenEngSBService</a>.
        </p>
        <p>
          The persistence of the security-bundle manages a set of
          GrantedAuthorities (Roles) for each instanceId. There is
          one exception: Users with "ROLE_ADMIN" are always granted
          access.
        </p>
      </div>
      <div class="section" title="17.3. Authentication">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both">
                <a id="d0e1670"
                name="d0e1670"></a>17.3. Authentication
              </h2>
            </div>
          </div>
        </div>
        <p>
          This chapter describes how to deal with security in
          internal bundles and client projects
        </p>
        <p>
          For authentication the OpenEngSB provides an
          AuthenticationProvider as a service. It's obtainable via
          blueprint.
        </p>
<pre xml:space="preserve" class="programlisting">
        &lt;reference interface="org.springframework.security.authentication.AuthenticationManager" /&gt;
     
</pre>
        <p>
          This service is able to authenticate users
          (org.springframework.security.authentication.UsernamePasswordAuthenticationToken)
          and bundles
          (org.openengsb.core.security.BundleAuthenticationToken).
          The use of the former is pretty obvious. The latter is
          used for authentication for internal actions, that
          require elevated privilages. This authentication should
          be used with caution, and never be exposed externally for
          security reasons.
        </p>
      </div>
    </div>
    <div xmlns:fo="http://www.w3.org/1999/XSL/Format"
    class="navfooter">
      <hr />
      <table width="100%" summary="Navigation footer">
        <tr>
          <td width="40%" align="left">
            <a accesskey="p"
            href="developer.persistence.html">Prev</a> 
          </td>
          <td width="20%" align="center">
            <a accesskey="h" href="openengsb-manual.html">Home</a>
          </td>
          <td width="40%" align="right">
             <a accesskey="n"
            href="developer.workflows.html">Next</a>
          </td>
        </tr>
        <tr>
          <td width="40%" align="left" valign="top">
            Chapter 16. Persistence in the OpenEngSB 
          </td>
          <td width="20%" align="center">
            <span style="color:white;font-size:85%;"><a
            href="http://openengsb.org/"
            title="OpenEngSB Community">OpenEngSB
            Community</a></span>
          </td>
          <td width="40%" align="right" valign="top">
             Chapter 18. Workflows
          </td>
        </tr>
      </table>
    </div>
  </body>
</html>
