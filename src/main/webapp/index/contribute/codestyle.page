---
title: Code style definitions
page_version: 1
page_creator: arcticwolf
--- pipeline:conf

h2. Coding style definitions

h3. Sun Coding Guidelines

The OpenEngSB Coding Guidelines are based upon the [Code Conventions for the Java Programming Language|http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html]. There are some additions and deviations for this project.

h4. Line length

A line length of 80 was standard 10 years ago, but with increasing screen size and resolution a length of 120 is more reasonable.

h4. Wrapping

Use the auto-formatter of your IDE. Import the [Eclipse Formatter file|https://github.com/openengsb/openengsb-framework/blob/master/etc/eclipse/formatter.xml].

h4. Number of declarations per line

Only one declaration per line is allowed.

h4. Declaration placement

Declare variables where they are needed. It's easier to read and restricts the scope of variables. Don't overshadow variables.

h4. Blank lines

The body of a method should not start with a blank line.

h3. General

h4. File format

Every Java file has to be UTF-8 encoded and has to use UNIX line endings. Indentations consist of four spaces, tab-stops are not allowed.

h4. Header

Every source file has to start with this header:
{code}
/**

  Licensed to the Austrian Association for Software Tool Integration (AASTI)
  under one or more contributor license agreements. See the NOTICE file
  distributed with this work for additional information regarding copyright
  ownership. The AASTI licenses this file to you under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

 */
{code}

h4. Duplication

Code duplication has to be avoided at all costs.

h4. Use guards

Guards are a possibility to reduce the amount of nesting. Heavily nested code is much harder to read. Bad:
{code}
public void foo() {
    if (conditionA) {
        if (conditionB) {
            if (conditionC) {
                // do some work
            }
        } else {
            throw new MyException();
        }
    }
}
{code}

Good:
{code}
public void foo() {
    if (!conditionA) {
        return;
    }

    if (!conditionB) {
        throw new MyException();
    }

    if (!conditionC) {
        return;
    }

    // do some work
}
{code}

h4. Keep methods short

Methods longer than 40 lines are candidates for refactoring. A method should only do one thing and has to be easily understandable. The number of arguments should be minimized. A method should only be at a single level of abstraction.

h4. Use enums

Prefer typesafe enumerations over integer constants.

h4. Avoid use of static members

Static members are a sign of a design error because they are like global variables. It's fine if you declare a constant as final abstract of course.

h4. Use fully qualified imports

Don't import org.example.package.*, instead import the needed classes.

h4. Never declare implementation types

Use interfaces or the abstract base class instead of concrete implementation classes where possible. Don't write:
{code}
ArrayList<String> names = new ArrayList<String>();
{code}
Instead use the interface name:
{code}
List<String> names = new ArrayList<String>();
{code}

h4. SerialVersionUID

Don't declare serialVersionUID just because your IDE tells you. Have a good reason why you need it. This can cause bugs that are hard to detect.

h4. Restrict scope of suppressed warnings

If you have to suppress a warning make sure you give it the smallest possible scope. This means you should never annotate a whole class with @SuppressWarnings. A method may be acceptable but you should try to annotate the problematic statements instead.

h4. Use String.format()

Use String.format() instead of long concatenation chains which are hard to read.

h4. Array declaration style

Always use {code}Type[] arrayName;{code} instead of the C-like {code}Type arrayName[];{code}

h4. Comments

Don't make funny comments, be professional. All comments have to be in English. Comment what methods do, not how they do it. Do not comment what is already stated in code.

h3. Naming

h4. Interfaces

Interfaces are not marked by starting their names with I. This exposes more information than necessary and is not Java-like.

h4. Don't abbreviate

Do not use abbreviations if it's not a project wide standard. Long method names are preferable to inconsistency. With automatic code completion this isn't a problem anyway.

h3. No clutter

*) Exception/Log Messages have to be concise. Don't end messages with "...".
*) Don't overuse FINAL, use it where you have a good reason something has to be final. Although it doesn't hurt to declare everything as final it clutters the code.
*) Don't use history tables in source files. Use the SCM system if you are interested in the changes of a file.
*) Don't use the JavaDoc author tag. Also use the SCM system.
*) Don't declare unnecessary constructors, especially the empty default constructor.
*) Don't make implicit calls explicitly, i.e. calling super(); in every constructor.
*) Don't specify modifiers that are implicit, i.e. don't make methods in interfaces {code}public abstract ...{code}.
*) Don't initialize fields with null, they are automatically initialized with null.
*) Don't use banners in comments.
*) Don't use closing brace comments, i.e. } // end if, they are a sign of too long methods.
*) Don't comment out code and commit it. This confuses programmers why it is there. Simply delete it, it's still present in the SCM history.

h3. Exception Handling
*) Don't log and throw. Either a exception should be logged or thrown to be processed at a more appropriate place.
*) Don't swallow exceptions silently. If you have to do it, you have to make a comment stating the reason.
*) Use runtime exceptions where possible.
*) Wrap exceptions in a RuntimeException if you don't want to specify the Exception in your method signature and you can't handle it.
*) Write meaningful exception message.

h3. Tests

h4. General
*) Make use of JUnit 4 features, e.g. @Test(expected = SomeException.class).
*) Tests should not output anything. They have to be automatically verified.
*) Don't catch exceptions just to fail manually. Declare the method to throw the exception.
*) Install a shutdown hook for test data files. This assures that they will be deleted and the project remains in a clean state.
*) Use [Mockito|http://code.google.com/p/mockito/] for mocking.
*) Tests should have descriptive method names. It should be deducible what will be tested. Bad: {code}testError(){code} Good: {code}invalidInMessage_ShouldReturnErrorResponse(){code}

h4. Naming Scheme
The Maven profiles for running the tests are configured to filter based on the naming of the test class. The package layout is just a further convenience for the developer for running the tests manually.

h5. Unit tests
Unit Tests test one class/method/feature in isolation from their dependencies by using test doubles as replacement. They should be fast and need no special environment setup for execution.
*) Filenames end with Test.java.
*) Located in the normal package structure, i.e. {code}outer.project.package.inner.project.package{code}.

h5. Integration tests
Integration Tests combine individual software modules to test their interaction with each other. They do not need a special environment setup for execution.
*) Filenames end with IT.java.
*) Located in {code}outer.project.package.it.inner.project.package{code}

h5. User tests
User Tests need a special execution environment and thus are not run automatically during any maven phase.
*) Filenames end with UT.java.
*) Located in {code}outer.project.package.ut.inner.project.package{code}

h3. XML Formatting

h4. File Format

Every XML file has to be UTF-8 encoded and has to use UNIX line endings. Indentations consist of TWO spaces, tabstops are not allowed. The line length shouldn't exceed 120 characters.

h4. Eclipse Settings

If you use Eclipse please choose these settings for your OpenEngSB workspace:
!/images/eclipse-xml-settings.png!


h3. Recommended Readings

*) Clean Code, Robert C. Martin, 2008
*) Effective Java Second Edition, Joshua Bloch, 2008
*) [7 tips on writing clean code|http://www.garshol.priv.no/blog/105.html]

