---
title: Building
page_version: 2
page_creator: gnodet
page_modifier: gnodet
--- pipeline:conf
h2. Building 

The project uses [Maven|http://maven.apache.org/] as its build tool. If you don't fancy using Maven you can use your IDE directly or [Download] a distribution or JAR.

h3. Prequisites

*Required:*
Project 1.0.0 and later:
* Download and [install Maven 3.0.3|http://maven.apache.org/download.html]
* Get the latest [Source]
* Java 1.6

h3. A normal build

{code}
mvn install
{code}

h3. Doing a Quick Build

The following avoids running all the unit test cases, we just skip the test running phase and not the building part
{code}
mvn -Dmaven.test.skip=true clean install
{code}

or

{code}
mvn -DskipTests clean install 
{code}

h3. Using an IDE

If you prefer to use an IDE then you can auto-generate the IDE's project files using maven plugins. e.g.

{code}
mvn eclipse:eclipse
{code}

or

{code}
mvn idea:idea
{code} 

h4. Importing into Eclipse

If you have not already done so, you will need to make Eclipse aware of the Maven repository so that it can build everything. In the preferences, go to Java->Build Path->Classpath and define a new Classpath Variable named M2_REPO that points to your local Maven repository (i.e., {{~/.m2/repository}} on Unix and {{c:\Documents and Settings\<user>\.m2\repository}} on Windows).

You can also get Maven to do this for you:
{code}
mvn eclipse:add-maven-repo -Declipse.workspace=/path/to/the/workspace/ 
{code}

h3. Building source jars
If you want to build jar files with the source code, that for instance Eclipse can important so you can debug the code as well. Then you can run this command from the root folder:
{code}
mvn clean source:jar install -Dtest=false
{code}
